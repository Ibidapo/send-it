{"version":3,"sources":["parcelValidation.js"],"names":["validation","addParcel","isLength","min","withMessage","matches","req","res","next","errors","isEmpty","status","send","error","array","msg","cancelParcel","getParcelbyId","getParcelbyUser","changeParcelDestination","changeParcelStatus","isIn","changeParcelPresentLocation"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,aAAa;AACjBC,aAAW,CACT,kBAAM,QAAN,EAAgBC,QAAhB,CAAyB,EAAEC,KAAK,CAAP,EAAzB,EAAqCC,WAArC,CAAiD,gCAAjD,CADS,EAET,kBAAM,aAAN,EAAqBF,QAArB,CAA8B,EAAEC,KAAK,CAAP,EAA9B,EAA0CC,WAA1C,CAAsD,mCAAtD,CAFS,EAGT,kBAAM,UAAN,EAAkBC,OAAlB,CAA0B,aAA1B,EAAyCD,WAAzC,CAAqD,gCAArD,CAHS,EAIT,kBAAM,SAAN,EAAiBF,QAAjB,CAA0B,EAAEC,KAAK,EAAP,EAA1B,EAAuCE,OAAvC,CAA+C,UAA/C,EAA2DD,WAA3D,CAAuE,yBAAvE,CAJS,EAKT,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAMC,SAAS,6BAAiBH,GAAjB,CAAf;AACA,QAAI,CAACG,OAAOC,OAAP,EAAL,EAAuB;AACrB,aAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,OAAOK,KAAP,GAAe,CAAf,EAAkBC,GAA3B,EAArB,CAAP;AACD;AACD,WAAOP,MAAP;AACD,GAXQ,CADM;AAcjBQ,gBAAc,CACZ,kBAAM,IAAN,EAAYX,OAAZ,CAAoB,OAApB,EAA6BD,WAA7B,CAAyC,4BAAzC,CADY,EAEZ,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAMC,SAAS,6BAAiBH,GAAjB,CAAf;AACA,QAAI,CAACG,OAAOC,OAAP,EAAL,EAAuB;AACrB,aAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,OAAOK,KAAP,GAAe,CAAf,EAAkBC,GAA3B,EAArB,CAAP;AACD;AACD,WAAOP,MAAP;AACD,GARW,CAdG;AAwBjBS,iBAAe,CACb,kBAAM,IAAN,EAAYZ,OAAZ,CAAoB,OAApB,EAA6BD,WAA7B,CAAyC,4BAAzC,CADa,EAEb,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAMC,SAAS,6BAAiBH,GAAjB,CAAf;AACA,QAAI,CAACG,OAAOC,OAAP,EAAL,EAAuB;AACrB,aAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,OAAOK,KAAP,GAAe,CAAf,EAAkBC,GAA3B,EAArB,CAAP;AACD;AACD,WAAOP,MAAP;AACD,GARY,CAxBE;AAkCjBU,mBAAiB,CACf,kBAAM,IAAN,EAAYb,OAAZ,CAAoB,OAApB,EAA6BD,WAA7B,CAAyC,0BAAzC,CADe,EAEf,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAMC,SAAS,6BAAiBH,GAAjB,CAAf;AACA,QAAI,CAACG,OAAOC,OAAP,EAAL,EAAuB;AACrB,aAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,OAAOK,KAAP,GAAe,CAAf,EAAkBC,GAA3B,EAArB,CAAP;AACD;AACD,WAAOP,MAAP;AACD,GARc,CAlCA;AA4CjBW,2BAAyB,CACvB,kBAAM,IAAN,EAAYd,OAAZ,CAAoB,OAApB,EAA6BD,WAA7B,CAAyC,4BAAzC,CADuB,EAEvB,kBAAM,aAAN,EAAqBF,QAArB,CAA8B,EAAEC,KAAK,CAAP,EAA9B,EAA0CC,WAA1C,CAAsD,mCAAtD,CAFuB,EAGvB,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAMC,SAAS,6BAAiBH,GAAjB,CAAf;AACA,QAAI,CAACG,OAAOC,OAAP,EAAL,EAAuB;AACrB,aAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,OAAOK,KAAP,GAAe,CAAf,EAAkBC,GAA3B,EAArB,CAAP;AACD;AACD,WAAOP,MAAP;AACD,GATsB,CA5CR;AAuDjBY,sBAAoB,CAClB,kBAAM,IAAN,EAAYf,OAAZ,CAAoB,OAApB,EAA6BD,WAA7B,CAAyC,4BAAzC,CADkB,EAElB,kBAAM,QAAN,EAAgBiB,IAAhB,CAAqB,CAAC,YAAD,EAAe,WAAf,EAA4B,WAA5B,CAArB,EAA+DjB,WAA/D,CAA2E,mBAA3E,CAFkB,EAGlB,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAMC,SAAS,6BAAiBH,GAAjB,CAAf;AACA,QAAI,CAACG,OAAOC,OAAP,EAAL,EAAuB;AACrB,aAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,OAAOK,KAAP,GAAe,CAAf,EAAkBC,GAA3B,EAArB,CAAP;AACD;AACD,WAAOP,MAAP;AACD,GATiB,CAvDH;AAkEjBc,+BAA6B,CAC3B,kBAAM,IAAN,EAAYjB,OAAZ,CAAoB,OAApB,EAA6BD,WAA7B,CAAyC,4BAAzC,CAD2B,EAE3B,kBAAM,iBAAN,EAAyBF,QAAzB,CAAkC,EAAEC,KAAK,CAAP,EAAlC,EAA8CC,WAA9C,CAA0D,wCAA1D,CAF2B,EAG3B,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAMC,SAAS,6BAAiBH,GAAjB,CAAf;AACA,QAAI,CAACG,OAAOC,OAAP,EAAL,EAAuB;AACrB,aAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,OAAOK,KAAP,GAAe,CAAf,EAAkBC,GAA3B,EAArB,CAAP;AACD;AACD,WAAOP,MAAP;AACD,GAT0B;AAlEZ,CAAnB;;kBA+EeR,U","file":"parcelValidation.js","sourceRoot":"/home/ibidapo/andela-bootcamp/send-it/lib/helper/validation","sourcesContent":["import { check, validationResult } from 'express-validator/check';\n\nconst validation = {\n  addParcel: [\n    check('origin').isLength({ min: 1 }).withMessage('Sender Address cannot be empty'),\n    check('destination').isLength({ min: 1 }).withMessage('Recipient Address cannot be empty'),\n    check('parcelKg').matches(/^\\d+\\.?\\d*$/).withMessage('Parcel weight must be a number'),\n    check('toPhone').isLength({ min: 11 }).matches(/^\\d{11}$/).withMessage('Phone must be 11 digits'),\n    (req, res, next) => {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).send({ error: errors.array()[0].msg });\n      }\n      return next();\n    },\n  ],\n  cancelParcel: [\n    check('id').matches(/^\\d+$/).withMessage('Parcel Id must be a number'),\n    (req, res, next) => {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).send({ error: errors.array()[0].msg });\n      }\n      return next();\n    },\n  ],\n  getParcelbyId: [\n    check('id').matches(/^\\d+$/).withMessage('Parcel Id must be a number'),\n    (req, res, next) => {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).send({ error: errors.array()[0].msg });\n      }\n      return next();\n    },\n  ],\n  getParcelbyUser: [\n    check('id').matches(/^\\d+$/).withMessage('User Id must be a number'),\n    (req, res, next) => {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).send({ error: errors.array()[0].msg });\n      }\n      return next();\n    },\n  ],\n  changeParcelDestination: [\n    check('id').matches(/^\\d+$/).withMessage('Parcel Id must be a number'),\n    check('destination').isLength({ min: 1 }).withMessage('Destination field cannot be empty'),\n    (req, res, next) => {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).send({ error: errors.array()[0].msg });\n      }\n      return next();\n    },\n  ],\n  changeParcelStatus: [\n    check('id').matches(/^\\d+$/).withMessage('Parcel Id must be a number'),\n    check('status').isIn(['In Transit', 'Delivered', 'Cancelled']).withMessage('status is invalid'),\n    (req, res, next) => {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).send({ error: errors.array()[0].msg });\n      }\n      return next();\n    },\n  ],\n  changeParcelPresentLocation: [\n    check('id').matches(/^\\d+$/).withMessage('Parcel Id must be a number'),\n    check('presentLocation').isLength({ min: 1 }).withMessage('Present location field cannot be empty'),\n    (req, res, next) => {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).send({ error: errors.array()[0].msg });\n      }\n      return next();\n    },\n  ],\n};\n\nexport default validation;\n"]}