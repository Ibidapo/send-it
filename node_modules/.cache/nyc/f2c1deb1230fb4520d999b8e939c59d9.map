{"version":3,"sources":["userController.js"],"names":["User","req","res","body","email","password","isAdmin","hash","encryption","encryptPassword","joined","format","pool","query","error","results","constraint","status","send","rows","jwt","sign","userId","user_id","is_admin","process","env","JWT_SECRET","tokenError","token","success","user","rowCount","isTrue","comparePassword","errs"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;AAEA;IACMA,I;;;;;;;;AACJ;iCACoBC,G,EAAKC,G,EAAK;AAAA,sBACSD,IAAIE,IADb;AAAA,UACpBC,KADoB,aACpBA,KADoB;AAAA,UACbC,QADa,aACbA,QADa;AAAA,UACHC,OADG,aACHA,OADG;;AAE5B,UAAMC,OAAOC,iBAAWC,eAAX,CAA2BJ,QAA3B,CAAb;AACA,UAAMK,SAAS,wBAASC,MAAT,CAAgB,GAAhB,CAAf;;AAEA,aAAOC,qBAAKC,KAAL,CAAW,2FAAX,EACL,CAACT,KAAD,EAAQG,IAAR,EAAcD,OAAd,EAAuBI,MAAvB,CADK,EAC2B,UAACI,KAAD,EAAQC,OAAR,EAAoB;AAClD,YAAID,KAAJ,EAAW;AACT,cAAIA,MAAME,UAAN,KAAqB,iBAAzB,EAA4C;AAC1C,mBAAOd,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,qBAAT,EAArB,CAAP;AACD;AACD,iBAAOZ,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AANiD,YAQ1CK,IAR0C,GAQjCJ,OARiC,CAQ1CI,IAR0C;;;AAUlD,eAAOC,uBAAIC,IAAJ,CAAS,EAAEC,QAAQH,KAAK,CAAL,EAAQI,OAAlB,EAA2BjB,SAASa,KAAK,CAAL,EAAQK,QAA5C,EAAT,EACLC,QAAQC,GAAR,CAAYC,UADP,EACmB,UAACC,UAAD,EAAaC,KAAb,EAAuB;AAC7C,cAAID,UAAJ,EAAgB;AACd,mBAAO1B,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,iCAAT,EAArB,CAAP;AACD;AACD,iBAAOZ,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEY,SAAS,kCAAX,EAA+CC,MAAMZ,KAAK,CAAL,CAArD,EAA8DU,YAA9D,EAArB,CAAP;AACD,SANI,CAAP;AAOD,OAlBI,CAAP;AAmBD;;AAED;;;;8BACiB5B,G,EAAKC,G,EAAK;AAAA,uBACGD,IAAIE,IADP;AAAA,UACjBC,KADiB,cACjBA,KADiB;AAAA,UACVC,QADU,cACVA,QADU;;;AAGzB,aAAOO,qBAAKC,KAAL,CAAW,sCAAX,EACL,CAACT,KAAD,CADK,EACI,UAACU,KAAD,EAAQC,OAAR,EAAoB;AAC3B,YAAID,KAAJ,EAAW;AACT,iBAAOZ,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AAH0B,YAKnBK,IALmB,GAKAJ,OALA,CAKnBI,IALmB;AAAA,YAKba,QALa,GAKAjB,OALA,CAKbiB,QALa;;;AAO3B,YAAIA,aAAa,CAAjB,EAAoB;AAClB,iBAAO9B,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,sBAAT,EAArB,CAAP;AACD;;AAED,YAAMP,OAAOY,KAAK,CAAL,EAAQd,QAArB;AACA,YAAM4B,SAASzB,iBAAW0B,eAAX,CAA2B7B,QAA3B,EAAqCE,IAArC,CAAf;;AAEA,YAAI0B,WAAW,IAAf,EAAqB;AACnB,iBAAO/B,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,qBAAT,EAArB,CAAP;AACD;;AAED,eAAOM,uBAAIC,IAAJ,CAAS,EAAEC,QAAQH,KAAK,CAAL,EAAQI,OAAlB,EAA2BjB,SAASa,KAAK,CAAL,EAAQK,QAA5C,EAAT,EACLC,QAAQC,GAAR,CAAYC,UADP,EACmB,UAACQ,IAAD,EAAON,KAAP,EAAiB;AACvC,cAAIM,IAAJ,EAAU;AACR,mBAAOjC,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,iCAAT,EAArB,CAAP;AACD;AACD,iBAAOZ,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEY,SAAS,iCAAX,EAA8CC,MAAMZ,KAAK,CAAL,CAApD,EAA6DU,YAA7D,EAArB,CAAP;AACD,SANI,CAAP;AAOD,OA1BI,CAAP;AA2BD;;;;;;kBAGY7B,I","file":"userController.js","sourceRoot":"/home/ibidapo/andela-bootcamp/send-it/lib/controller","sourcesContent":["import jwt from 'jsonwebtoken';\nimport moment from 'moment';\n\nimport pool from '../models/connection';\nimport encryption from '../helper/encryption/bcrypt';\n\n// Utility class controlling every request made for a user\nclass User {\n  // method to add user\n  static registerUser(req, res) {\n    const { email, password, isAdmin } = req.body;\n    const hash = encryption.encryptPassword(password);\n    const joined = moment().format('L');\n\n    return pool.query('INSERT INTO users (email, password, is_admin, joined) VALUES ($1, $2, $3, $4) RETURNING *',\n      [email, hash, isAdmin, joined], (error, results) => {\n        if (error) {\n          if (error.constraint === 'users_email_key') {\n            return res.status(409).send({ error: 'User already exists' });\n          }\n          return res.status(500).send({ error: 'Unexpected database error occurred' });\n        }\n\n        const { rows } = results;\n\n        return jwt.sign({ userId: rows[0].user_id, isAdmin: rows[0].is_admin },\n          process.env.JWT_SECRET, (tokenError, token) => {\n            if (tokenError) {\n              return res.status(401).send({ error: 'Unexpected token error occurred' });\n            }\n            return res.status(201).send({ success: 'User was successfully registered', user: rows[0], token });\n          });\n      });\n  }\n\n  // method to validate user by Id\n  static loginUser(req, res) {\n    const { email, password } = req.body;\n\n    return pool.query('SELECT * FROM users WHERE email = $1',\n      [email], (error, results) => {\n        if (error) {\n          return res.status(500).send({ error: 'Unexpected database error occurred' });\n        }\n\n        const { rows, rowCount } = results;\n\n        if (rowCount === 0) {\n          return res.status(401).send({ error: 'User doesn\\'t exists' });\n        }\n\n        const hash = rows[0].password;\n        const isTrue = encryption.comparePassword(password, hash);\n\n        if (isTrue !== true) {\n          return res.status(401).send({ error: 'Password is invalid' });\n        }\n\n        return jwt.sign({ userId: rows[0].user_id, isAdmin: rows[0].is_admin },\n          process.env.JWT_SECRET, (errs, token) => {\n            if (errs) {\n              return res.status(401).send({ error: 'Unexpected token error occurred' });\n            }\n            return res.status(200).send({ success: 'User was successfully logged in', user: rows[0], token });\n          });\n      });\n  }\n}\n\nexport default User;\n"]}