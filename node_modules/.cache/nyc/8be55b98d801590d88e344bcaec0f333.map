{"version":3,"sources":["parcelController.js"],"names":["Parcel","req","res","body","origin","parcelKg","destination","toPhone","presentLocation","senderId","jwt","decode","headers","authorization","split","userId","created","format","pool","query","error","results","rowCount","status","send","rows","success","parcel","id","params","parseInt","sender_id","isSenderAdmin","isAdmin","parcels","reverse","parcelId","parcel_id","err","result","console","log","email"],"mappings":";;;;;;qjBAAA;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;AAEA;IACMA,M;;;;;;;;AACJ;8BACiBC,G,EAAKC,G,EAAK;AAAA,sBAMrBD,IAAIE,IANiB;AAAA,UAEvBC,MAFuB,aAEvBA,MAFuB;AAAA,UAGvBC,QAHuB,aAGvBA,QAHuB;AAAA,UAIvBC,WAJuB,aAIvBA,WAJuB;AAAA,UAKvBC,OALuB,aAKvBA,OALuB;;AAOzB,UAAMC,kBAAkBJ,MAAxB;AACA,UAAMK,WAAWC,uBAAIC,MAAJ,CAAWV,IAAIW,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAX,EAAoDC,MAArE;AACA,UAAMC,UAAU,wBAASC,MAAT,CAAgB,GAAhB,CAAhB;;AAEA,aAAOC,qBAAKC,KAAL,CAAW,uLAAX,EACL,CAACV,QAAD,EAAWJ,QAAX,EAAqBD,MAArB,EAA6BE,WAA7B,EAA0C,YAA1C,EAAwDE,eAAxD,EAAyED,OAAzE,EAAkFS,OAAlF,CADK,EAEL,UAACI,KAAD,EAAQC,OAAR,EAAoB;AAClB,YAAID,SAASC,QAAQC,QAAR,KAAqB,CAAlC,EAAqC;AACnC,iBAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AAHiB,YAKVK,IALU,GAKDJ,OALC,CAKVI,IALU;;AAMlB,eAAOvB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,eAAX,EAA4BC,QAAQF,KAAK,CAAL,CAApC,EAArB,CAAP;AACD,OATI,CAAP;AAUD;;AAED;;;;iCACoBxB,G,EAAKC,G,EAAK;AAAA,UACpB0B,EADoB,GACb3B,IAAI4B,MADS,CACpBD,EADoB;;AAE5B,UAAMnB,WAAWC,uBAAIC,MAAJ,CAAWV,IAAIW,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAX,EAAoDC,MAArE;;AAEA,aAAOG,qBAAKC,KAAL,CAAW,kFAAX,EACL,CAAC,WAAD,EAAcS,EAAd,EAAkB,WAAlB,CADK,EAEL,UAACR,KAAD,EAAQC,OAAR,EAAoB;AAClB,YAAID,KAAJ,EAAW;AACT,iBAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AAHiB,YAKVK,IALU,GAKSJ,OALT,CAKVI,IALU;AAAA,YAKJH,QALI,GAKSD,OALT,CAKJC,QALI;;;AAOlB,YAAIA,aAAa,CAAjB,EAAoB;AAClB,iBAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,4CAAT,EAArB,CAAP;AACD;;AAED,YAAIU,SAASrB,QAAT,EAAmB,EAAnB,MAA2BqB,SAASL,KAAK,CAAL,EAAQM,SAAjB,EAA4B,EAA5B,CAA/B,EAAgE;AAC9D,iBAAO7B,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,eAAT,EAArB,CAAP;AACD;AACD,eAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,qBAAX,EAAkCC,QAAQF,KAAK,CAAL,CAA1C,EAArB,CAAP;AACD,OAjBI,CAAP;AAkBD;;AAED;;;;+BACkBxB,G,EAAKC,G,EAAK;AAC1B,UAAM8B,gBAAgBtB,uBAAIC,MAAJ,CAAWV,IAAIW,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAX,EAAoDmB,OAA1E;;AAEAf,2BAAKC,KAAL,CAAW,uBAAX,EAAoC,UAACC,KAAD,EAAQC,OAAR,EAAoB;AACtD,YAAID,KAAJ,EAAW;AACT,iBAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AAHqD,YAK9CK,IAL8C,GAK3BJ,OAL2B,CAK9CI,IAL8C;AAAA,YAKxCH,QALwC,GAK3BD,OAL2B,CAKxCC,QALwC;;;AAOtD,YAAI,CAACU,aAAL,EAAoB;AAClB,iBAAO9B,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,eAAT,EAArB,CAAP;AACD;AACD,eAAOE,WAAW,CAAX,GACHpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,oBAAX,EAAiCQ,SAAST,KAAKU,OAAL,EAA1C,EAArB,CADG,GAEHjC,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,qBAAX,EAArB,CAFJ;AAGD,OAbD;AAcD;;AAED;;;;kCACqBzB,G,EAAKC,G,EAAK;AAAA,UACrB0B,EADqB,GACd3B,IAAI4B,MADU,CACrBD,EADqB;;;AAG7B,aAAOV,qBAAKC,KAAL,CAAW,4CAAX,EAAyD,CAACS,EAAD,CAAzD,EAA+D,UAACR,KAAD,EAAQC,OAAR,EAAoB;AACxF,YAAID,KAAJ,EAAW;AACT,iBAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AAHuF,YAKhFK,IALgF,GAK7DJ,OAL6D,CAKhFI,IALgF;AAAA,YAK1EH,QAL0E,GAK7DD,OAL6D,CAK1EC,QAL0E;;;AAOxF,YAAIA,aAAa,CAAjB,EAAoB;AAClB,iBAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,sBAAT,EAArB,CAAP;AACD;AACD,eAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,iBAAX,EAA8BC,QAAQF,KAAK,CAAL,CAAtC,EAArB,CAAP;AACD,OAXM,CAAP;AAYD;;AAED;;;;oCACuBxB,G,EAAKC,G,EAAK;AAAA,UACvB0B,EADuB,GAChB3B,IAAI4B,MADY,CACvBD,EADuB;;AAE/B,UAAMnB,WAAWC,uBAAIC,MAAJ,CAAWV,IAAIW,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAX,EAAoDC,MAArE;;AAEA,aAAOG,qBAAKC,KAAL,CAAW,4CAAX,EAAyD,CAACS,EAAD,CAAzD,EAA+D,UAACR,KAAD,EAAQC,OAAR,EAAoB;AACxF,YAAID,KAAJ,EAAW;AACT,iBAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AAHuF,YAKhFK,IALgF,GAK7DJ,OAL6D,CAKhFI,IALgF;AAAA,YAK1EH,QAL0E,GAK7DD,OAL6D,CAK1EC,QAL0E;;;AAOxF,YAAIA,aAAa,CAAjB,EAAoB;AAClB,iBAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,qBAAT,EAArB,CAAP;AACD;;AAED,YAAIU,SAASrB,QAAT,EAAmB,EAAnB,MAA2BqB,SAASL,KAAK,CAAL,EAAQM,SAAjB,EAA4B,EAA5B,CAA/B,EAAgE;AAC9D,iBAAO7B,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,eAAT,EAArB,CAAP;AACD;AACD,eAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,oBAAX,EAAiCQ,SAAST,KAAKU,OAAL,EAA1C,EAArB,CAAP;AACD,OAfM,CAAP;AAgBD;;AAED;;;;4CAC+BlC,G,EAAKC,G,EAAK;AAAA,UAC/B0B,EAD+B,GACxB3B,IAAI4B,MADoB,CAC/BD,EAD+B;AAAA,UAE/BtB,WAF+B,GAEfL,IAAIE,IAFW,CAE/BG,WAF+B;;AAGvC,UAAMG,WAAWC,uBAAIC,MAAJ,CAAWV,IAAIW,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAX,EAAoDC,MAArE;;AAEA,aAAOG,qBAAKC,KAAL,CAAW,6FAAX,EACL,CAACb,WAAD,EAAcsB,EAAd,EAAkB,WAAlB,CADK,EAC2B,UAACR,KAAD,EAAQC,OAAR,EAAoB;AAClD,YAAID,KAAJ,EAAW;AACT,iBAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AAHiD,YAK1CK,IAL0C,GAKvBJ,OALuB,CAK1CI,IAL0C;AAAA,YAKpCH,QALoC,GAKvBD,OALuB,CAKpCC,QALoC;;;AAOlD,YAAIA,aAAa,CAAjB,EAAoB;AAClB,iBAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,4CAAT,EAArB,CAAP;AACD;;AAED,YAAIU,SAASrB,QAAT,EAAmB,EAAnB,MAA2BqB,SAASL,KAAK,CAAL,EAAQM,SAAjB,EAA4B,EAA5B,CAA/B,EAAgE;AAC9D,iBAAO7B,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,eAAT,EAArB,CAAP;AACD;AACD,eAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,8BAAX,EAA2CC,QAAQF,KAAK,CAAL,CAAnD,EAArB,CAAP;AACD,OAhBI,CAAP;AAiBD;;AAED;;;;gDACmCxB,G,EAAKC,G,EAAK;AAAA,UACnC0B,EADmC,GAC5B3B,IAAI4B,MADwB,CACnCD,EADmC;AAAA,UAEnCpB,eAFmC,GAEfP,IAAIE,IAFW,CAEnCK,eAFmC;;AAG3C,UAAMwB,gBAAgBtB,uBAAIC,MAAJ,CAAWV,IAAIW,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAX,EAAoDmB,OAA1E;;AAEA,aAAOf,qBAAKC,KAAL,CAAW,4FAAX,EACL,CAACX,eAAD,EAAkBoB,EAAlB,EAAsB,WAAtB,CADK,EAC+B,UAACR,KAAD,EAAQC,OAAR,EAAoB;AACtD,YAAID,KAAJ,EAAW;AACT,iBAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AAHqD,YAK9CK,IAL8C,GAK3BJ,OAL2B,CAK9CI,IAL8C;AAAA,YAKxCH,QALwC,GAK3BD,OAL2B,CAKxCC,QALwC;;;AAOtD,YAAIA,aAAa,CAAjB,EAAoB;AAClB,iBAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,4CAAT,EAArB,CAAP;AACD;;AAED,YAAI,CAACY,aAAL,EAAoB;AAClB,iBAAO9B,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,eAAT,EAArB,CAAP;AACD;AACD,eAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,mCAAX,EAAgDC,QAAQF,KAAK,CAAL,CAAxD,EAArB,CAAP;AACD,OAhBI,CAAP;AAiBD;;AAED;;;;uCAC0BxB,G,EAAKC,G,EAAK;AAAA,UAC1B0B,EAD0B,GACnB3B,IAAI4B,MADe,CAC1BD,EAD0B;AAAA,UAE1BL,MAF0B,GAEftB,IAAIE,IAFW,CAE1BoB,MAF0B;;AAGlC,UAAMS,gBAAgBtB,uBAAIC,MAAJ,CAAWV,IAAIW,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAX,EAAoDmB,OAA1E;AACA,UAAIxB,iBAAJ;AACA,UAAI2B,iBAAJ;;AAEAlB,2BAAKC,KAAL,CAAW,kFAAX,EACE,CAACI,MAAD,EAASK,EAAT,EAAa,WAAb,CADF,EAC6B,UAACR,KAAD,EAAQC,OAAR,EAAoB;AAC7C,YAAID,KAAJ,EAAW;AACT,iBAAOlB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,oCAAT,EAArB,CAAP;AACD;;AAH4C,YAKrCK,IALqC,GAKlBJ,OALkB,CAKrCI,IALqC;AAAA,YAK/BH,QAL+B,GAKlBD,OALkB,CAK/BC,QAL+B;;;AAO7C,YAAIA,aAAa,CAAjB,EAAoB;AAClB,iBAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,4CAAT,EAArB,CAAP;AACD;;AAED,YAAI,CAACY,aAAL,EAAoB;AAClB,iBAAO9B,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,OAAO,eAAT,EAArB,CAAP;AACD;;AAEDX,mBAAWgB,KAAK,CAAL,EAAQM,SAAnB;AACAK,mBAAWX,KAAK,CAAL,EAAQY,SAAnB;;AAEAnB,6BAAKC,KAAL,CAAW,4CAAX,EACE,CAACV,QAAD,CADF,EACc,UAAC6B,GAAD,EAAMC,MAAN,EAAiB;AAC3B,cAAID,OAAOC,OAAOjB,QAAP,KAAoB,CAA/B,EAAkC;AAChCkB,oBAAQC,GAAR,CAAY,sCAAZ;AACA;AACD;AACDD,kBAAQC,GAAR,CAAY,kBAAZ;AACA,8BAAkBF,OAAOd,IAAP,CAAY,CAAZ,EAAeiB,KAAjC,UAA8CN,QAA9C,qBAAsEA,QAAtE;AACD,SARH;AASA,eAAOlC,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,yBAAX,EAAsCC,QAAQF,KAAK,CAAL,CAA9C,EAArB,CAAP;AACD,OA7BH;AA8BD;;;;;;kBAGYzB,M","file":"parcelController.js","sourceRoot":"/home/ibidapo/andela-bootcamp/send-it/lib/controller","sourcesContent":["/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\n\nimport pool from '../models/connection';\nimport emailNotification from '../helper/mailer/mail';\n\n// Utility class controlling every request made for a parcel\nclass Parcel {\n  // method to add parcel order\n  static addParcel(req, res) {\n    const {\n      origin,\n      parcelKg,\n      destination,\n      toPhone,\n    } = req.body;\n    const presentLocation = origin;\n    const senderId = jwt.decode(req.headers.authorization.split(' ')[1]).userId;\n    const created = moment().format('L');\n\n    return pool.query('INSERT INTO parcels (sender_id, parcel_kg, sender_address, recipient_address, status, present_location, recipient_phone, created) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *',\n      [senderId, parcelKg, origin, destination, 'In Transit', presentLocation, toPhone, created],\n      (error, results) => {\n        if (error || results.rowCount === 0) {\n          return res.status(500).send({ error: 'Unexpected database error occurred' });\n        }\n\n        const { rows } = results;\n        return res.status(201).send({ success: 'Order created', parcel: rows[0] });\n      });\n  }\n\n  // method to cancel parcel order by Id\n  static cancelParcel(req, res) {\n    const { id } = req.params;\n    const senderId = jwt.decode(req.headers.authorization.split(' ')[1]).userId;\n\n    return pool.query('UPDATE parcels SET status = $1 WHERE parcel_id = $2 AND status <> $3 RETURNING *',\n      ['Cancelled', id, 'Delivered'],\n      (error, results) => {\n        if (error) {\n          return res.status(500).send({ error: 'Unexpected database error occurred' });\n        }\n\n        const { rows, rowCount } = results;\n\n        if (rowCount === 0) {\n          return res.status(400).send({ error: 'Order doesn\\'t exist or has been delivered' });\n        }\n\n        if (parseInt(senderId, 10) !== parseInt(rows[0].sender_id, 10)) {\n          return res.status(403).send({ error: 'Access Denied' });\n        }\n        return res.status(200).send({ success: 'Order was cancelled', parcel: rows[0] });\n      });\n  }\n\n  // method to get all parcel orders\n  static getParcels(req, res) {\n    const isSenderAdmin = jwt.decode(req.headers.authorization.split(' ')[1]).isAdmin;\n\n    pool.query('SELECT * FROM parcels', (error, results) => {\n      if (error) {\n        return res.status(500).send({ error: 'Unexpected database error occurred' });\n      }\n\n      const { rows, rowCount } = results;\n\n      if (!isSenderAdmin) {\n        return res.status(403).send({ error: 'Access Denied' });\n      }\n      return rowCount > 0\n        ? res.status(200).send({ success: 'Order(s) retrieved', parcels: rows.reverse() })\n        : res.status(204).send({ success: 'No orders available' });\n    });\n  }\n\n  // method to get parcel order by Id\n  static getParcelbyId(req, res) {\n    const { id } = req.params;\n\n    return pool.query('SELECT * FROM parcels WHERE parcel_id = $1', [id], (error, results) => {\n      if (error) {\n        return res.status(500).send({ error: 'Unexpected database error occurred' });\n      }\n\n      const { rows, rowCount } = results;\n\n      if (rowCount === 0) {\n        return res.status(404).send({ error: 'Order doesn\\'t exist' });\n      }\n      return res.status(200).send({ success: 'Order retrieved', parcel: rows[0] });\n    });\n  }\n\n  // method to get parcel order by User ID\n  static getParcelbyUser(req, res) {\n    const { id } = req.params;\n    const senderId = jwt.decode(req.headers.authorization.split(' ')[1]).userId;\n\n    return pool.query('SELECT * FROM parcels WHERE sender_id = $1', [id], (error, results) => {\n      if (error) {\n        return res.status(500).send({ error: 'Unexpected database error occurred' });\n      }\n\n      const { rows, rowCount } = results;\n\n      if (rowCount === 0) {\n        return res.status(404).send({ error: 'User doesn\\'t exist' });\n      }\n\n      if (parseInt(senderId, 10) !== parseInt(rows[0].sender_id, 10)) {\n        return res.status(403).send({ error: 'Access Denied' });\n      }\n      return res.status(200).send({ success: 'Order(s) retrieved', parcels: rows.reverse() });\n    });\n  }\n\n  // method to change destination of a parcel order by Id\n  static changeParcelDestination(req, res) {\n    const { id } = req.params;\n    const { destination } = req.body;\n    const senderId = jwt.decode(req.headers.authorization.split(' ')[1]).userId;\n\n    return pool.query('UPDATE parcels SET recipient_address = $1 WHERE parcel_id = $2 AND status <> $3 RETURNING *',\n      [destination, id, 'Delivered'], (error, results) => {\n        if (error) {\n          return res.status(500).send({ error: 'Unexpected database error occurred' });\n        }\n\n        const { rows, rowCount } = results;\n\n        if (rowCount === 0) {\n          return res.status(400).send({ error: 'Order doesn\\'t exist or has been delivered' });\n        }\n\n        if (parseInt(senderId, 10) !== parseInt(rows[0].sender_id, 10)) {\n          return res.status(403).send({ error: 'Access Denied' });\n        }\n        return res.status(200).send({ success: 'Order\\'s destination updated', parcel: rows[0] });\n      });\n  }\n\n  // method to change present location of a parcel order by Id\n  static changeParcelPresentLocation(req, res) {\n    const { id } = req.params;\n    const { presentLocation } = req.body;\n    const isSenderAdmin = jwt.decode(req.headers.authorization.split(' ')[1]).isAdmin;\n\n    return pool.query('UPDATE parcels SET present_location = $1 WHERE parcel_id = $2 AND status <> $3 RETURNING *',\n      [presentLocation, id, 'Delivered'], (error, results) => {\n        if (error) {\n          return res.status(500).send({ error: 'Unexpected database error occurred' });\n        }\n\n        const { rows, rowCount } = results;\n\n        if (rowCount === 0) {\n          return res.status(400).send({ error: 'Order doesn\\'t exist or has been delivered' });\n        }\n\n        if (!isSenderAdmin) {\n          return res.status(403).send({ error: 'Access Denied' });\n        }\n        return res.status(200).send({ success: 'Order\\'s present location updated', parcel: rows[0] });\n      });\n  }\n\n  // method to change status of a parcel order by Id\n  static changeParcelStatus(req, res) {\n    const { id } = req.params;\n    const { status } = req.body;\n    const isSenderAdmin = jwt.decode(req.headers.authorization.split(' ')[1]).isAdmin;\n    let senderId;\n    let parcelId;\n\n    pool.query('UPDATE parcels SET status = $1 WHERE parcel_id = $2 AND status <> $3 RETURNING *',\n      [status, id, 'Delivered'], (error, results) => {\n        if (error) {\n          return res.status(500).send({ error: 'Unexpected database error occurred' });\n        }\n\n        const { rows, rowCount } = results;\n\n        if (rowCount === 0) {\n          return res.status(400).send({ error: 'Order doesn\\'t exist or has been delivered' });\n        }\n\n        if (!isSenderAdmin) {\n          return res.status(403).send({ error: 'Access Denied' });\n        }\n\n        senderId = rows[0].sender_id;\n        parcelId = rows[0].parcel_id;\n\n        pool.query('SELECT email FROM users WHERE user_id = $1',\n          [senderId], (err, result) => {\n            if (err || result.rowCount === 0) {\n              console.log('Unexpected user query error occurred');\n              return;\n            }\n            console.log('email sending...');\n            emailNotification(result.rows[0].email, `[# ${parcelId}]`, `parcel #${parcelId} status was updated`);\n          });\n        return res.status(200).send({ success: 'Order\\'s status updated', parcel: rows[0] });\n      });\n  }\n}\n\nexport default Parcel;\n"]}